{
	"info": {
		"_postman_id": "afc0fe12-815b-4a4c-9b70-2aca6cc83ae6",
		"name": "ENDPOINTS",
		"description": "1. Registrarte, debes seleccionar un Rol: OWNER, USER o ADMIN. Te retornará un Token que debes colocar en Authorization. El token pude durar hasta 24 horas.\n    \n2. Hacer el Login correspondiente, de esta manera se te autorizará para poder usar los endpoint a los que tu Rol tiene acceso.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45428891",
		"_collection_link": "https://lazheart.postman.co/workspace/Lazheart's-Workspace~2eca68a4-0d71-4d01-88e7-ae8ef981f62c/collection/43513911-afc0fe12-815b-4a4c-9b70-2aca6cc83ae6?action=share&source=collection_link&creator=45428891"
	},
	"item": [
		{
			"name": "AUTH",
			"item": [
				{
					"name": "REGISTER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"lazheart@gmail.com\",\n    \"password\": \"password\",\n    \"name\": \"lazheart\",\n    \"lastname\": \"label \",\n    \"phone\": \"905690545\",\n    \"role\": \"USER\"  //OWNER OR USER\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "LOGIN",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"if (responseData.token) {",
									"    pm.collectionVariables.set(\"token\", responseData.token);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"notlazheart@gmail.com\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "VERIFYPASWORD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": 1,\n    \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/verify-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"verify-password"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "USER",
			"item": [
				{
					"name": "GetMe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user = pm.response.json();\r",
									"pm.collectionVariables.set(\"id\", user.id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Bearer",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateMe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Actualizado correctamente. Logéate de nuevo.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Bearer",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Falito",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345678",
									"type": "text"
								},
								{
									"key": "email",
									"value": "danielrestaurante@gmail.com",
									"type": "text"
								},
								{
									"key": "phone",
									"value": "908590646",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/user/update/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"update",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Verifica que el token exista\r",
									"if (!pm.collectionVariables.get(\"token\")) {\r",
									"    throw new Error(\"Token no encontrado. Haz login primero.\");\r",
									"}\r",
									"\r",
									"// Verifica que el user_id exista\r",
									"if (!pm.collectionVariables.get(\"id\")) {\r",
									"    throw new Error(\"Id no encontrado. Ejecuta GetMe primero.\");\r",
									"}\r",
									"\r",
									"// Opcional: Imprime valores para debug\r",
									"console.log(\"Token:\", pm.collectionVariables.get(\"token\"));\r",
									"console.log(\"User ID:\", pm.collectionVariables.get(\"id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/user/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{id}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetallUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Verifica que el token exista\r",
									"if (!pm.collectionVariables.get(\"token\")) {\r",
									"    throw new Error(\"Token no encontrado. Haz login primero.\");\r",
									"}\r",
									"\r",
									"// Verifica que el user_id exista\r",
									"if (!pm.collectionVariables.get(\"id\")) {\r",
									"    throw new Error(\"Id no encontrado. Ejecuta GetMe primero.\");\r",
									"}\r",
									"\r",
									"// Opcional: Imprime valores para debug\r",
									"console.log(\"Token:\", pm.collectionVariables.get(\"token\"));\r",
									"console.log(\"User ID:\", pm.collectionVariables.get(\"id\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/user/all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"all"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetReview",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user/reviews",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetComment",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/user/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"comments"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteById",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetOwnedRestaurant",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user/owned-restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"owned-restaurants"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "RESTAURANT",
			"item": [
				{
					"name": "CreateRestuarnts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"notlazheartCoks\",\r\n  \"locationDto\": {\r\n    \"latitud\": -13.046344,    \r\n    \"longitud\": -47.042793\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllRestaurants",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/restaurants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteRestuarnts",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetMenu",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/restaurants/{{restaurantId}}/menu",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"{{restaurantId}}",
								"menu"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetComments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/restaurants/{{restaurantId}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"{{restaurantId}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetReviews",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/restaurants/{{restaurantId}}/reviews",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"{{restaurantId}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetRestaurant",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "REVIEW",
			"item": [
				{
					"name": "UpdateReview",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Texto actualizado de la reseña.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/content/{{reviewId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"content",
								"{{reviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetReviewById",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reviews/{{reviewId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reviews",
								"{{reviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateReview",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userId",
									"value": "{{id}}",
									"type": "text"
								},
								{
									"key": "restaurantId",
									"value": "{{restaurantId}}",
									"type": "text"
								},
								{
									"key": "content",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/reviews",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteReview",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reviews/{{reviewId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reviews",
								"{{reviewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetReviewByRestuarantId",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/restaurant/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurant",
								"{{restaurantId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "COMMENT",
			"item": [
				{
					"name": "GetComment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reviews/{{reviewId}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reviews",
								"{{reviewId}}",
								"comments"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "AddComment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/reviews/{{reviewId}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reviews",
								"{{reviewId}}",
								"comments"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "UpdateComment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"¡Totalmente de acuerdo con tu reseña!\",\n    \"userId\": 1,\n    \"reviewId\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{commentId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "DeleteComment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{commentId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "MENU",
			"item": [
				{
					"name": "GetMenu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/menu/{{menuId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"menu",
								"{{menuId}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "CreateMenu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"dishes\": [\n    {\n      \"name\": \"Ceviche Clásico\",\n      \"description\": \"Pescado fresco marinado en limón\",\n      \"price\": 25.50,\n      \"category\": \"ENTRADA\"\n    },\n    {\n      \"name\": \"Lomo Saltado\",\n      \"description\": \"Carne salteada con cebolla y tomate\",\n      \"price\": 32.00,\n      \"category\": \"PLATO_PRINCIPAL\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"restaurants",
								"{{restaurantId}}"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "UpdateMenu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"restaurantId\": 5,  // Debe coincidir con el menú a actualizar\n  \"dishes\": [\n    {\n      \"name\": \" \",  // Nombre actualizado\n      \"description\": \" \",\n      \"price\": 28.50,           // Precio actualizado\n      \"category\": \"ENTRADA\"\n    },\n    {\n      \"name\": \"Nuevo Plato\",     // Plato añadido\n      \"description\": \"Descripción aquí\",\n      \"price\": 35.00,\n      \"category\": \"PLATO_PRINCIPAL\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/menu/{{menuId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"menu",
								"{{menuId}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "DeleteMenu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/menu/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"menu",
								"restaurants",
								"{{restaurantId}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "DISH",
			"item": [
				{
					"name": "GetDishes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/menus/{{menuId}}/dishes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"menus",
								"{{menuId}}",
								"dishes"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "AddDishes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "UpdateDishes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{commentId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "DeleteDishes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{commentId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "LOCATION",
			"item": [
				{
					"name": "GetLocationsRes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/locations/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"locations",
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddLocations",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/locations/restaurants/{{restaurantId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"locations",
								"restaurants",
								"{{restaurantId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateLocation",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base_url}}/locations/{{locationId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"locations",
								"{{locationId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteLocation",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/locations/{{locationId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"locations",
								"{{locationId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (pm.collectionVariables.get(\"token\")) {\r",
					"    pm.request.headers.add({\r",
					"        key: \"Authorization\",\r",
					"        value: `Bearer ${pm.collectionVariables.get(\"token\")}`\r",
					"    });\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "id",
			"value": "",
			"type": "string"
		},
		{
			"key": "reviewId",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "restaurantId",
			"value": "",
			"type": "string"
		},
		{
			"key": "menuId",
			"value": "",
			"type": "string"
		},
		{
			"key": "dishId",
			"value": "",
			"type": "string"
		},
		{
			"key": "locationId",
			"value": "",
			"type": "string"
		}
	]
}